{"version":3,"sources":["webpack://dicom-character-set/webpack/bootstrap","webpack://dicom-character-set/external \"util\"","webpack://dicom-character-set/./character-sets.js","webpack://dicom-character-set/./convert-bytes.js","webpack://dicom-character-set/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","asciiElement","codeElement","escapeSequence","encoding","isASCII","bytesPerCodePoint","characterSets","ISO_IR 6","ISO_IR 100","ISO_IR 101","ISO_IR 109","ISO_IR 110","ISO_IR 144","ISO_IR 127","ISO_IR 126","ISO_IR 138","ISO_IR 148","ISO_IR 13","ISO_IR 166","ISO 2022 IR 6","extension","elements","ISO 2022 IR 100","ISO 2022 IR 101","ISO 2022 IR 109","ISO 2022 IR 110","ISO 2022 IR 144","ISO 2022 IR 127","ISO 2022 IR 126","ISO 2022 IR 138","ISO 2022 IR 148","ISO 2022 IR 13","ISO 2022 IR 166","ISO 2022 IR 87","multiByte","setHighBit","ISO 2022 IR 159","isJISX0212","ISO 2022 IR 149","ISO 2022 IR 58","ISO_IR 192","GB18030","GBK","ESCAPE_BYTE","CARRIAGE_RETURN","LINE_FEED","FORM_FEED","TAB","BACKSLASH","EQUAL_SIGN","CARET","Decoder","TextDecoder","appendRunWithoutPromise","output","byteRunCharacterSet","bytes","byteRunStart","byteRunEnd","oneRunBytes","characterSet","byteStart","byteEnd","oneEncodingBytes","bytesStart","bytesEnd","length","Error","processedBytes","Uint8Array","outIndex","processJISX0212","slice","preprocessBytes","convertWithoutExtensions","convertBytesCore","withoutExtensionsFunc","appendFunc","specificCharacterSet","options","checkParameters","characterSetStrings","split","map","trim","toUpperCase","some","undefined","forceExtensions","returnValue","characterSetString","includes","push","replace","forceExtensionsIfApplicable","initialCharacterSet","filter","str","filterMultiByteCharacterSetStrings","getCharacterSetStrings","startsWith","checkedOptions","allowedCharacterSets","delimiters","appendRun","initialCharacterSets","G0","find","element","G1","activeCharacterSets","assign","nextSetIndex","getCharacterSet","next","findNextCharacterSet","index","nextCharacterSet","readEscapeSequence","convertWithExtensions","incomingVR","vr","getDelimitersForVR","retVal","decode","adjustShiftJISResult","start","currentCodeElement","activeCodeElements","nextCodeElement","byte","escapeSequenceMatches","startIndex","escapeByteIndex","extensionSets","setIndex","extensionSet","elementIndex","convertBytes","__webpack_exports__"],"mappings":"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","file":"dicom-character-set.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"util\");","const asciiElement = { codeElement: 'G0',\n  escapeSequence: [0x1B, 0x28, 0x42],\n  encoding: 'windows-1254',\n  isASCII: true,\n  bytesPerCodePoint: 1 };\n\nexport const characterSets = {\n\n  /** ********************************\n   * Single-byte without extensions *\n   **********************************/\n\n  // Default\n  'ISO_IR 6': { encoding: 'utf-8' },\n\n  // Latin alphabet No. 1\n  'ISO_IR 100': { encoding: 'windows-1254' },\n\n  // Latin alphabet No. 2\n  'ISO_IR 101': { encoding: 'iso-8859-2' },\n\n  // Latin alphabet No. 3\n  'ISO_IR 109': { encoding: 'iso-8859-3' },\n\n  // Latin alphabet No. 4\n  'ISO_IR 110': { encoding: 'iso-8859-4' },\n\n  // Cyrillic\n  'ISO_IR 144': { encoding: 'iso-8859-5' },\n\n  // Arabic\n  'ISO_IR 127': { encoding: 'iso-8859-6' },\n\n  // Greek\n  'ISO_IR 126': { encoding: 'iso-8859-7' },\n\n  // Hebrew\n  'ISO_IR 138': { encoding: 'iso-8859-8' },\n\n  // Latin alphabet No. 5\n  'ISO_IR 148': { encoding: 'windows-1254' },\n\n  // Japanese\n  'ISO_IR 13': { encoding: 'shift-jis' },\n\n  // Thai\n  'ISO_IR 166': { encoding: 'tis-620' },\n\n  /** *****************************\n   * Single-byte with extensions *\n   *******************************/\n\n  // Default\n  'ISO 2022 IR 6': {\n    extension: true,\n    elements: [asciiElement]\n  },\n\n  // Latin alphabet No. 1\n  'ISO 2022 IR 100': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x41],\n      encoding: 'windows-1254',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Latin alphabet No. 2\n  'ISO 2022 IR 101': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x42],\n      encoding: 'iso-8859-2',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Latin alphabet No. 3\n  'ISO 2022 IR 109': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x43],\n      encoding: 'iso-8859-3',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Latin alphabet No. 4\n  'ISO 2022 IR 110': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x44],\n      encoding: 'iso-8859-4',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Cyrillic\n  'ISO 2022 IR 144': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x4C],\n      encoding: 'iso-8859-5',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Arabic\n  'ISO 2022 IR 127': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x47],\n      encoding: 'iso-8859-6',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Greek\n  'ISO 2022 IR 126': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x46],\n      encoding: 'iso-8859-7',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Hebrew\n  'ISO 2022 IR 138': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x48],\n      encoding: 'iso-8859-8',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Latin alphabet No. 5\n  'ISO 2022 IR 148': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x4D],\n      encoding: 'windows-1254',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Japanese\n  'ISO 2022 IR 13': {\n    extension: true,\n    elements: [{ codeElement: 'G0',\n      escapeSequence: [0x1B, 0x28, 0x4A],\n      encoding: 'shift-jis',\n      bytesPerCodePoint: 1 },\n    { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x29, 0x49],\n      encoding: 'shift-jis',\n      bytesPerCodePoint: 1 }]\n  },\n\n  // Thai\n  'ISO 2022 IR 166': {\n    extension: true,\n    elements: [asciiElement, { codeElement: 'G1',\n      escapeSequence: [0x1B, 0x2D, 0x54],\n      encoding: 'tis-620',\n      bytesPerCodePoint: 1 }]\n  },\n\n  /** ****************************\n   * Multi-byte with extensions *\n   ******************************/\n\n  // Japanese\n  'ISO 2022 IR 87': {\n    extension: true,\n    multiByte: true,\n    elements: [{ codeElement: 'G0',\n      escapeSequence: [0x1B, 0x24, 0x42],\n      encoding: 'euc-jp',\n      setHighBit: true,\n      bytesPerCodePoint: 2 }]\n  },\n\n  'ISO 2022 IR 159': {\n    extension: true,\n    multiByte: true,\n    elements: [{ codeElement: 'G0',\n      escapeSequence: [0x1B, 0x24, 0x28, 0x44],\n      encoding: 'euc-jp',\n      isJISX0212: true,\n      bytesPerCodePoint: 2 }]\n  },\n\n  // Korean\n  'ISO 2022 IR 149': {\n    extension: true,\n    multiByte: true,\n    elements: [{ codeElement: 'G1',\n      escapeSequence: [0x1B, 0x24, 0x29, 0x43],\n      encoding: 'euc-kr',\n      bytesPerCodePoint: 2 }]\n  },\n\n  // Simplified Chinese\n  'ISO 2022 IR 58': {\n    extension: true,\n    multiByte: true,\n    elements: [{ codeElement: 'G1',\n      escapeSequence: [0x1B, 0x24, 0x29, 0x41],\n      encoding: 'gb18030',\n      bytesPerCodePoint: 2 }]\n  },\n\n  /** *******************************\n   * Multi-byte without extensions *\n   *********************************/\n\n  'ISO_IR 192': { encoding: 'utf-8',\n    multiByte: true },\n\n  GB18030: { encoding: 'gb18030',\n    multiByte: true },\n\n  GBK: { encoding: 'gbk',\n    multiByte: true }\n};\n","import { characterSets } from './character-sets.js';\n\nconst ESCAPE_BYTE = 0x1B;\n\nconst CARRIAGE_RETURN = 0xA;\nconst LINE_FEED = 0xC;\nconst FORM_FEED = 0xD;\nconst TAB = 0x9;\n// Aka yen symbol in Romaji\nconst BACKSLASH = 0x5C;\nconst EQUAL_SIGN = 0x3D;\nconst CARET = 0x5E;\n\nconst Decoder = (typeof TextDecoder === 'undefined' && typeof require !== 'undefined') ? require('util').TextDecoder : TextDecoder;\n\nfunction adjustShiftJISResult (str) {\n  // browsers do strict ASCII for these characters, so to be compliant with Shift JIS we replace them\n  return str.replace(/~/g, '‾').replace(/\\\\/g, '¥');\n}\n\nfunction appendRunWithoutPromise (output, byteRunCharacterSet, bytes, byteRunStart, byteRunEnd) {\n  const oneRunBytes = preprocessBytes(byteRunCharacterSet, bytes, byteRunStart, byteRunEnd);\n\n  return output + convertWithoutExtensions(byteRunCharacterSet.encoding, oneRunBytes);\n}\n\nfunction checkParameters (specificCharacterSet, bytes) {\n  if (bytes && !(bytes instanceof Uint8Array)) {\n    throw new Error('bytes must be a Uint8Array');\n  }\n  if (specificCharacterSet && (typeof specificCharacterSet !== 'string')) {\n    throw new Error('specificCharacterSet must be a string');\n  }\n}\n\nfunction convertBytesCore (withoutExtensionsFunc, appendFunc, specificCharacterSet, bytes, options) {\n  checkParameters(specificCharacterSet, bytes);\n\n  const characterSetStrings = getCharacterSetStrings(specificCharacterSet);\n\n  if (characterSetStrings.length === 1 && !characterSetStrings[0].startsWith('ISO 2022')) {\n    return withoutExtensionsFunc(characterSets[characterSetStrings[0]].encoding, bytes);\n  }\n\n  const checkedOptions = options || {};\n\n  return convertWithExtensions(characterSetStrings.map((characterSet) => characterSets[characterSet]),\n    bytes, getDelimitersForVR(checkedOptions.vr), appendFunc);\n}\n\nfunction convertWithExtensions (allowedCharacterSets, bytes, delimiters, appendRun) {\n  let output = '';\n\n  if (!bytes || bytes.length === 0) {\n    return output;\n  }\n\n  const initialCharacterSets = {\n    G0: allowedCharacterSets[0].elements.find((element) => element.codeElement === 'G0'),\n    G1: allowedCharacterSets[0].elements.find((element) => element.codeElement === 'G1')\n  };\n\n  const activeCharacterSets = Object.assign({}, initialCharacterSets);\n  let byteRunStart = 0;\n  let byteRunCharacterSet;\n  let nextSetIndex = 0;\n\n  // Group bytes into runs based on their encoding so we don't have to use a different\n  // decoder for each character. Note that G0 and G1 planes can be different encodings,\n  // so we can't just group by character set.\n\n  while (nextSetIndex < bytes.length) {\n    if (!byteRunCharacterSet) {\n      byteRunCharacterSet = getCharacterSet(bytes[byteRunStart], activeCharacterSets);\n    }\n\n    const next = findNextCharacterSet(bytes, byteRunStart, byteRunCharacterSet,\n      activeCharacterSets, initialCharacterSets, delimiters);\n\n    nextSetIndex = next.index;\n\n    if (nextSetIndex > byteRunStart) {\n      output = appendRun(output, byteRunCharacterSet, bytes, byteRunStart, nextSetIndex);\n    }\n\n    byteRunStart = nextSetIndex;\n    byteRunCharacterSet = next.characterSet;\n\n    if (next.escapeSequence) {\n      const nextCharacterSet = readEscapeSequence(bytes, nextSetIndex, allowedCharacterSets);\n\n      activeCharacterSets[nextCharacterSet.codeElement] = nextCharacterSet;\n      byteRunStart += nextCharacterSet.escapeSequence.length;\n    }\n  }\n\n  return output;\n}\n\nfunction convertWithoutExtensions (encoding, bytes) {\n  const retVal = new Decoder(encoding).decode(bytes);\n\n\n  return (encoding === 'shift-jis') ? adjustShiftJISResult(retVal) : retVal;\n}\n\n// Multibyte non-extension character sets must stand on their own or else be ignored. This method enforces that.\nfunction filterMultiByteCharacterSetStrings (characterSetStrings) {\n  const initialCharacterSet = characterSets[characterSetStrings[0]];\n\n  if (initialCharacterSet.multiByte && !initialCharacterSet.extension) {\n    return [characterSetStrings[0]];\n  }\n\n  return characterSetStrings.filter((str) => !characterSets[str].multiByte || characterSets[str].extension);\n}\n\nfunction findNextCharacterSet (bytes, start, currentCodeElement, activeCodeElements, initialCharacterSets, delimiters) {\n  for (let i = start; i < bytes.length; i += currentCodeElement.bytesPerCodePoint) {\n    if (bytes[i] === ESCAPE_BYTE) {\n      return { escapeSequence: true,\n        index: i };\n    }\n    if (currentCodeElement.bytesPerCodePoint === 1 && delimiters.includes(bytes[i])) {\n      Object.assign(activeCodeElements, initialCharacterSets);\n    }\n    const nextCodeElement = getCharacterSet(bytes[i], activeCodeElements);\n\n    if (currentCodeElement && nextCodeElement !== currentCodeElement) {\n      return { characterSet: nextCodeElement,\n        index: i };\n    }\n  }\n\n  return { index: bytes.length };\n}\n\nfunction forceExtensionsIfApplicable (characterSetStrings) {\n  const forceExtensions = (characterSetStrings.length > 1);\n\n  const returnValue = [];\n\n  for (let i = 0; i < characterSetStrings.length; i++) {\n    const characterSetString = characterSetStrings[i];\n\n    if (!returnValue.includes(characterSetString)) {\n      returnValue.push(forceExtensions ? characterSetString.replace('ISO_IR', 'ISO 2022 IR') : characterSetString);\n    }\n  }\n\n  return returnValue;\n}\n\nfunction getCharacterSet (byte, activeCharacterSets) {\n  if (byte > 0x7F && activeCharacterSets.G1) {\n    return activeCharacterSets.G1;\n  }\n  if (activeCharacterSets.G0) {\n    return activeCharacterSets.G0;\n  }\n  // for robustness if byte <= 0x7F, try to output using G1 if no G0 is selected\n  if (activeCharacterSets.G1 && activeCharacterSets.G1.bytesPerCodePoint === 1) {\n    return activeCharacterSets.G1;\n  }\n  // If G1 is multibyte, default to ASCII\n\n  return characterSets['ISO 2022 IR 6'].elements[0];\n}\n\nfunction getCharacterSetStrings (specificCharacterSet) {\n  let characterSetStrings = specificCharacterSet ? specificCharacterSet.split('\\\\').map((characterSet) => characterSet.trim().toUpperCase()) : [''];\n\n  if (characterSetStrings[0] === '') {\n    characterSetStrings[0] = (characterSetStrings.length > 1) ? 'ISO 2022 IR 6' : 'ISO_IR 6';\n  }\n\n  if (characterSetStrings.some((characterSet) => characterSets[characterSet] === undefined)) {\n    throw new Error('Invalid specific character set specified.');\n  }\n\n  characterSetStrings = filterMultiByteCharacterSetStrings(characterSetStrings);\n\n  return forceExtensionsIfApplicable(characterSetStrings);\n}\n\nfunction getDelimitersForVR (incomingVR) {\n  const vr = (incomingVR || '').trim().toUpperCase();\n\n  const delimiters = [CARRIAGE_RETURN, LINE_FEED, FORM_FEED, TAB];\n\n  if (!['UT', 'ST', 'LT'].includes(vr)) {\n    // for delimiting multi-valued items\n    delimiters.push(BACKSLASH);\n  }\n  if (vr === 'PN') {\n    delimiters.push(EQUAL_SIGN);\n    delimiters.push(CARET);\n  }\n\n  return delimiters;\n}\n\nfunction preprocessBytes (characterSet, bytes, byteStart, byteEnd) {\n  let oneEncodingBytes;\n\n  if (characterSet.isJISX0212) {\n    oneEncodingBytes = processJISX0212(bytes, byteStart, byteEnd);\n  } else {\n    oneEncodingBytes = bytes.slice(byteStart, byteEnd);\n    if (characterSet.setHighBit) {\n      setHighBit(oneEncodingBytes);\n    }\n  }\n\n  return oneEncodingBytes;\n}\n\nfunction processJISX0212 (bytes, bytesStart, bytesEnd) {\n  const length = bytesEnd - bytesStart;\n\n  if (length % 2 !== 0) {\n    throw new Error('JIS X string with a character not having exactly two bytes!');\n  }\n\n  const processedBytes = new Uint8Array(length + (length / 2));\n  let outIndex = 0;\n\n  for (let i = bytesStart; i < bytesEnd; i += 2) {\n    processedBytes[outIndex++] = 0x8F;\n    processedBytes[outIndex++] = bytes[i] | 0x80;\n    processedBytes[outIndex++] = bytes[i + 1] | 0x80;\n  }\n\n  return processedBytes;\n}\n\nfunction escapeSequenceMatches (escapeSequence, bytes, startIndex) {\n  for (let escapeByteIndex = 0; escapeByteIndex < escapeSequence.length; escapeByteIndex++) {\n    if (startIndex + escapeByteIndex >= bytes.length) {\n      return false;\n    } else if (bytes[startIndex + escapeByteIndex] !== escapeSequence[escapeByteIndex]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction readEscapeSequence (bytes, start, extensionSets) {\n  for (let setIndex = 0; setIndex < extensionSets.length; setIndex++) {\n    const extensionSet = extensionSets[setIndex];\n\n    for (let elementIndex = 0; elementIndex < extensionSet.elements.length; elementIndex++) {\n      const element = extensionSet.elements[elementIndex];\n\n      if (escapeSequenceMatches(element.escapeSequence, bytes, start)) {\n        return element;\n      }\n    }\n  }\n\n  throw new Error(`Unknown escape sequence encountered at byte ${start}`);\n}\n\nfunction setHighBit (bytes) {\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] |= 0x80;\n  }\n}\n\nexport function convertBytes (specificCharacterSet, bytes, options) {\n  return convertBytesCore(convertWithoutExtensions, appendRunWithoutPromise, specificCharacterSet, bytes, options);\n}\n","export { convertBytes } from './convert-bytes.js';\nexport { characterSets } from './character-sets.js';\n"],"sourceRoot":""}